import turtle

path = "96.882 11.8518 196.833 14.1702 175.808 6.37081 167.446 1.99998 160.345 11.1148 151.599 7.83553 150.135 16.8851 142.409 22.9819 146.621 28.8314 144.441 35.1941 146.045 35.292 141.389 41.9206 139.301 42.0279 129.799 35.9778 128.997 37.2185 122.193 48.4931 126.432 53.7083 128.766 60.9619 133.772 64.1199 136.411 68.6867 137.185 73.9298 138.162 79.6627 141.494 83.7023 133.585 86.1 127.417 90.6248 126.636 98.3542 121.004 103.798 114.789 104.488 108.193 104.824 104.044 105.878 97.7233 104.068 90.2479 103.998 85.2345 108.845 84.1373 109.349 77.7964 109.554 73.2116 121.403 75.1533 127.173 68.057 138.419 68.831 151.56 62.2281 162.289 58.8468 166.394 57.8279 172.738 54.082 176.362 54.082 183.41 50.4518 194.503 45.9383 198.09 43.8003 202.652 29.5694 205.442 19.3249 214.142 14.5932 217.589 11.4918 223.13 6.38707 226.158 7.73752 232.357 5.34672 238.072 1.99999 243.436 10.2397 258.074 16.4986 266.424 19.8896 272.236 22.8013 276.798 17.1888 282.401 16.902 290.284 16.2846 296.271 16.3191 299.138 23.6677 311.168 31.2122 312.225 38.1598 315.119 52.0676 308.357 65.9479 312.399 70.3139 329.884 74.3294 342.852 75.7069 352.147 84.0189 352.644 88.9198 353.203 92.8014 358.785 90.9595 364.807 95.6912 372.983 103.826 390.819 104.138 401.723 105.27 412.254 102.739 416.373 99.8129 418.359 99.1466 425.648 96.8952 431.446 100.698 436.817 105.944 440.964 107.541 441.069 108.976 445.601 109.7 450.782 115.628 458.931 108.799 465.855 99.9761 470.492 97.4786 478.333 100.537 483.397 103.843 489.621 102.099 498.267 103.182 510.003 101.803 519.605 99.8614 529.243 98.386 532.852 95.1162 540.343 93.9985 542.181 91.5998 549.371 90.2698 559.148 85.118 568.821 88.6265 577.702 89.2365 588.411 94.483 596.524 97.674 615.338 105.606 634.516 114.473 647.056 119.53 649.727 124.388 651.763 135.829 655.637 135.934 659.958 141.496 658.974 156.551 665.162 156.7 671.401 160.372 676.326 159.065 685.069 165.146 690.217 165.244 694.168 168.541 705.231 178.977 709.904 186.121 717.256 186.578 717.388 186.585 717.388 201.38 705.133 218.297 705.693 218.409 701.063 224.782 702.315 229.894 697.91 229.944 695.531 231.956 697.32 238.431 700.419 243.502 707.916 246.862 711.211 247.263 716.61 247.444 721.857 244.463 724.43 245.215 729.885 246.972 736.767 247.724 744 255.121 742.392 258.278 738.791 262.251 737.154 271.709 725.325 272.306 717.234 277.553 711.409 283.129 706.91 285.06 699.447 288.535 692.683 295.469 686.298 297.381 682.099 300.427 678.912 309.679 670.078 312.118 657.537 315.149 652.348 316.865 646.57 324.886 636.442 332.467 626.714 323.331 616.726 313.734 607.681 316.736 597.149 317.207 583.664 315.963 577.35 315.175 571.879 322.586 570.445 322.024 565.333 318.543 562.004 322.988 554.408 318.509 552.596 317.516 548.518 318.374 540.812 318.381 540.804 318.464 540.734 318.373 540.804 317.669 540.65 308.851 543.959 298.55 541.903 294.507 540.414 292.117 538.782 290.295 537.077 290.204 536.999 280.072 534.012 277.772 530.704 276.493 528.662 276.473 525.795 274.454 521.13 278.85 521.087 279.053 518.5 277.205 511.415 277.95 503.751 280.312 496.287 280.502 488.839 279.482 486.3 274.526 490.16 274.506 486.194 275.222 481.977 280.579 478.779 280.672 478.564 285.115 474.087 290.902 471.828 297.765 473.423 301.472 474.269 305.043 475.541 299.657 468.826 291.825 464.602 289.533 460.79 291.839 452.231 294.308 451.383 294.792 447.342 294.344 445.447 296.503 444.859 303.258 440.964 303.258 439.012 301.298 436.977 305.453 432.543 310.149 434.879 310.156 433.417 309.22 433.334 309.137 431.893 307.857 430.621 306.893 430.517 311.183 430.362 313.73 434.363 311.183 427.572 310.206 420.452 309.453 418.732 309.966 416.982 309.39 412.057 307.427 411.722 305.129 408.673 303.335 406.722 297.126 404.937 295.672 404.86 294.208 403.504 293.597 402.889 292.852 399.736 291.578 391.699 295.376 387.348 296.662 380.627 298.426 375.31 300.698 369.771 301.035 368.842 305.761 365.737 303.56 363.106 302.786 359.309 303.224 344.286 303.399 343.852 304.876 337.487 304.068 331.976 301.55 328.08 297.036 326.219 307.245 314.313 311.203 307.691 312.195 300.194 313.742 296.467 315.527 293.516 316.695 290.192 319.298 288.383 318.657 284.872 319.067 282.024 319.319 274.246 318.595 266.55 321.703 257.635 322.625 255.951 324.558 252.625 328.946 249.761 328.305 244.775 324.987 239.438 322.51 237.325 319.283 232.031 318.116 226.316 314.431 213.731 310.239 208.842 308.674 206.144 307.679 208.591 303.375 202.018 300.789 198.958 297.211 197.768 297.254 189.031 299.075 185.314 298.442 181.316 298.224 170.279 304.103 166.72 312.195 180.467 318.06 186.741 324.226 192.875 334 190.571 328.417 187.739 326.771 182.235 325.323 181.899 323.473 179.977 322.671 177.421 320.379 172.318 316.596 166.268 317.103 160.311 311.88 155.627 310.718 151.91 309.643 148.929 304.045 144.684 297.999 138.695 289.097 133.871 279.821 131.044 278.541 129.519 275.728 127.742 272.022 123.921 268.422 120.306 256.82 117.06 255.456 114.088 250.343 111.803 246.864 109.19 246.189 104.484 244.444 103.714 243.468 101.965 241.019 99.0259 242.425 103.579 237.904 100.533 236.145 98.0043 233.86 99.6136 228.447 99.7676 224.558 94.9116 221.542 89.5985 219.581 86.4732 218.139 82.816 216.178 81.9671 213.042 75.6371 211.023 69.4237 209.491 63.0657 207.662 56.8803 199.106 55.7841 198.206 48.1573 198.288 45.699 198.206 38.576 192.413 36.2063 191.132 32.4792 192.067 32.1433 191.899 30.1888 197.398 27.0915 196.498 27.1381 200.873 32.7778 207.15 28.5795 206.638 23.8355 203.656 23.8355 204.037 26.5503 202.3 27.8192 201.863 28.0244 202.889 19.7632 205.878 13.4146 201.61 12.0571 201.019 10.1072 196.843 11.7772"

turtle.speed(-1)

coordinates = path.split()

commands = [",".join(coordinates[i:i+2]) for i in range(0, len(coordinates), 2)]
moveto = commands.pop().split(",")

turtle.penup()
turtle.goto(-float(moveto[0]), float(moveto[1]))
turtle.pendown()

data = [
  {"name": "Berat", "x": 208.5, "y": 256.5, "deaths": 2, "cases": 172, "recoveries": 90, "tests": 1790},
  {"name": "Diber", "x": 119.5, "y": 503.5, "deaths": 4, "cases": 106, "recoveries": 50, "tests": 898},
  {"name": "Durres", "x": 302.5, "y": 415.5, "deaths": 39, "cases": 1287, "recoveries": 723, "tests": 6206},
  {"name": "Elbasan", "x": 184.5, "y": 361.5, "deaths": 14, "cases": 319, "recoveries": 143, "tests": 2150},
  {"name": "Fier", "x": 281.5, "y": 261.5, "deaths": 13, "cases": 457, "recoveries": 302, "tests": 3296},
  {"name": "Gjirokaster", "x": 170.5, "y": 102.5, "deaths": 3, "cases": 110, "recoveries": 66, "tests": 1839},
  {"name": "Korce", "x": 52.5, "y": 241.5, "deaths": 12, "cases": 359, "recoveries": 172, "tests": 1729},
  {"name": "Kukes", "x": 119.5, "y": 598.5, "deaths": 6, "cases": 340, "recoveries": 198, "tests": 1848},
  {"name": "Lezhe", "x": 264.5, "y": 526.5, "deaths": 10, "cases": 430, "recoveries": 229, "tests": 2570},
  {"name": "Shkoder", "x": 289.5, "y": 599.5, "deaths": 36, "cases": 726, "recoveries": 406, "tests": 4195},
  {"name": "Tirane", "x": 233.5, "y": 413.5, "deaths": 130, "cases": 4670, "recoveries": 2475, "tests": 27297},
  {"name": "Vlore", "x": 292.5, "y": 197.5, "deaths": 6, "cases": 303, "recoveries": 166, "tests": 2997},
]

totals = {
  "deaths": 275,
  "cases": 9279,
  "recoveries": 5020,
  "tests": 56815
}

turtle.color("#c7c7c7")
# Drawing the map
for i in range(len(commands)):
  if (i < 3):
    continue
  c = commands[i].split(",")
  x = float(c[0])
  y = float(c[1])
  turtle.goto(-x,y)
turtle.goto(-float(moveto[0]), float(moveto[1]))  
turtle.ht()

# End map drawing

turtle.penup()

type = "deaths"

cities = turtle.Turtle()
cities.speed(-1)

colormap = {
  "tests": "#90e8db",
  "deaths": "#ff8f8f",
  "recoveries": "#5ff54e",
  "cases": "#ffc77d"
}

# Drawing cities and statistics based on type
def drawStats(stat):
  cities.clear()
  print("Showing for COVID-19 " + stat + ".")
  cities.penup()
  style = ('Arial', 10, "bold")

  cities.goto(-70,50)
  cities.pendown()
  cities.color("red")
  cities.write("Total " + stat, font=style, align='left')
  cities.penup()
  cities.goto(-70,30)
  cities.write(totals[stat], font=style, align='left')

  for city in data:
    cities.goto(-city["x"], city["y"])
    cities.color(colormap[stat])
    cities.begin_fill()
    cities.pendown()
    cities.circle(int(100 * city[stat] / totals[stat]))
    cities.end_fill()
    cities.penup()

  # We draw text in another loop so it is drawn above the circles
  for city in data:
    cities.goto(-city["x"], city["y"])
    textposx = cities.pos()[0] + 10
    textpoxy = cities.pos()[1]
    statposx = textposx
    statpoxy = textpoxy - 15

    cities.goto(textposx, textpoxy)
    cities.pendown()
    cities.color('black')
    cities.write(city["name"], font=style, align='left')
    cities.penup()

    cities.color('red')
    cities.goto(statposx, statpoxy)
    cities.write(city[stat], font=style, align='left')    

  cities.color("black")
  cities.ht()

drawStats("deaths")
print("You can choose to see different statistics.")
print("1 - Deaths")
print("2 - Tests")
print("3 - Recoveries")
print("4 - Cases")

types = [
  'deaths',
  'tests',
  'recoveries',
  'cases'
]

def askInput():
  typeInput = input("Type the number for the requested statistic and press enter to map:")
  chosen = int(typeInput[0])
  if (chosen not in [1,2,3,4]):
    print("Wrong input: Please select 1, 2, 3 or 4 depending on the data you want")
  else:
    drawStats(types[chosen - 1])
  askInput()

askInput()